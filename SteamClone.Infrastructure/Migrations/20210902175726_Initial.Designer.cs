// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SteamClone.Infrastructure.Games.Contexts;

namespace SteamClone.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210902175726_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("Developer")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Synopsis")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GamesId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GamesId");

                    b.HasIndex("UserId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.WishList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GamesId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GamesId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Game", b =>
                {
                    b.HasOne("StreamClone.Domain.Model.Games.Game", null)
                        .WithMany("RelatedGames")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Review", b =>
                {
                    b.HasOne("StreamClone.Domain.Model.Games.Game", null)
                        .WithMany("Reviews")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Tag", b =>
                {
                    b.HasOne("StreamClone.Domain.Model.Games.Game", "Game")
                        .WithMany("Tags")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.Library", b =>
                {
                    b.HasOne("StreamClone.Domain.Model.Games.Game", "Games")
                        .WithMany()
                        .HasForeignKey("GamesId");

                    b.HasOne("StreamClone.Domain.Users.Model.User", "User")
                        .WithMany("Library")
                        .HasForeignKey("UserId");

                    b.Navigation("Games");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.WishList", b =>
                {
                    b.HasOne("StreamClone.Domain.Model.Games.Game", "Games")
                        .WithMany()
                        .HasForeignKey("GamesId");

                    b.HasOne("StreamClone.Domain.Users.Model.User", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserId");

                    b.Navigation("Games");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamClone.Domain.Model.Games.Game", b =>
                {
                    b.Navigation("RelatedGames");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("StreamClone.Domain.Users.Model.User", b =>
                {
                    b.Navigation("Library");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
